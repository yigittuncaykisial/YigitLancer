@model Controllers.ConversationDetailVM
@{
    ViewData["Title"] = "Sohbet";
    var myIdStr = User.FindFirst("UserId")?.Value;
    int.TryParse(myIdStr, out var meId);
}

<style>
    .chat-page {
        max-width: 1100px;
        margin-inline: auto
    }

    .chat-card {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 140px)
    }

    .chat-header {
        position: sticky;
        top: 0;
        z-index: 2;
        background: var(--bs-body-bg)
    }

    .chat-body {
        flex: 1;
        overflow: auto;
        background: var(--bs-body-bg)
    }

    .chat-footer {
        position: sticky;
        bottom: 0;
        z-index: 2;
        background: var(--bs-body-bg)
    }

    .profile-card {
        position: sticky;
        top: 0
    }

    .avatar-lg {
        width: 96px;
        height: 96px;
        border-radius: 50%;
        object-fit: cover
    }

    .avatar-sm {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover
    }

    .msg-row {
        display: flex;
        gap: .5rem;
        margin-bottom: .5rem
    }

        .msg-row.mine {
            justify-content: flex-end
        }

    .bubble {
        max-width: 70%;
        padding: .6rem .8rem;
        border-radius: 1rem;
        box-shadow: 0 2px 10px rgba(0,0,0,.06)
    }

        .bubble.mine {
            background: var(--bs-primary);
            color: #fff;
            border-bottom-right-radius: .35rem
        }

        .bubble.other {
            background: var(--bs-light);
            border-bottom-left-radius: .35rem
        }

    .msg-meta {
        font-size: .75rem;
        opacity: .8;
        margin-top: .25rem
    }

    .date-sep {
        position: relative;
        text-align: center;
        margin: 1rem 0;
        color: var(--bs-secondary-color)
    }

        .date-sep:before, .date-sep:after {
            content: "";
            position: absolute;
            top: 50%;
            width: 40%;
            height: 1px;
            background: var(--bs-border-color)
        }

        .date-sep:before {
            left: 0
        }

        .date-sep:after {
            right: 0
        }

        .date-sep span {
            padding: 0 .6rem;
            background: var(--bs-body-bg)
        }

    .input-round {
        border-radius: 999px;
        resize: none;
        max-height: 160px
    }
</style>

<div class="container py-4 chat-page">
    <div class="row g-4">
        <!-- SOL PROFİL -->
        <aside class="col-12 col-lg-3">
            <div class="card shadow-sm profile-card">
                <div class="card-body text-center">
                    <img src="@(string.IsNullOrEmpty(Model.Other?.ProfileImagePath) ? "/uploads/default.png" : Model.Other!.ProfileImagePath)"
                         class="avatar-lg mb-3 border" alt="avatar" />
                    <h6 class="fw-bold mb-1">@Model.Other?.UserName</h6>
                    <div class="text-muted small mb-3">@Model.Other?.UserJob</div>

                    <div class="d-grid gap-2">
                        <a class="btn btn-outline-primary btn-sm"
                           asp-controller="Freelancers" asp-action="Details" asp-route-id="@Model.Other?.UserId">
                            <i class="bi bi-person"></i> Profili Gör
                        </a>
                        @if (!string.IsNullOrEmpty(Model.Other?.UserEmail))
                        {
                            <a class="btn btn-outline-secondary btn-sm" href="mailto:@Model.Other!.UserEmail">
                                <i class="bi bi-envelope"></i> E-posta
                            </a>
                        }
                    </div>

                    @* İş varsa göster, yoksa hiç gösterme *@
                    @if (Model.Job != null)
                    {
                        <div class="mt-3 small text-muted">
                            <i class="bi bi-briefcase me-1"></i>@Model.Job.JobName
                        </div>
                    }
                </div>
            </div>
        </aside>

        <!-- SAĞ SOHBET -->
        <section class="col-12 col-lg-9">
            <div class="card shadow-sm chat-card">
                <div class="card-header chat-header d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center gap-2">
                        <img src="@(string.IsNullOrEmpty(Model.Other?.ProfileImagePath) ? "/uploads/default.png" : Model.Other!.ProfileImagePath)"
                             class="avatar-sm border" alt="">
                        <div>
                            <div class="fw-bold">@Model.Other?.UserName</div>
                            @* İş varsa alt başlıkta göster *@
                            @if (Model.Job != null)
                            {
                                <small class="text-muted"><i class="bi bi-briefcase me-1"></i>@Model.Job.JobName</small>
                            }
                        </div>
                    </div>
                    <a class="btn btn-sm btn-outline-secondary" asp-action="Index">
                        <i class="bi bi-arrow-left"></i> Sohbetler
                    </a>
                </div>

                <div id="chatBody" class="chat-body p-3">
                    @{
                        DateTime? lastDate = null;
                    }
                    @foreach (var m in Model.Messages)
                    {
                        var mine = (m.SenderUserId == meId);
                        var d = m.CreatedAt.ToLocalTime().Date;
                        if (lastDate == null || d != lastDate.Value)
                        {
                            <div class="date-sep"><span>@d.ToString("dd MMM yyyy")</span></div>
                            ;
                            lastDate = d;
                        }
                        <div class="msg-row @(mine ? "mine" : "")">
                            @if (!mine)
                            {
                                <img class="avatar-sm border" src="@(string.IsNullOrEmpty(Model.Other?.ProfileImagePath) ? "/uploads/default.png" : Model.Other!.ProfileImagePath)" alt="">
                            }
                            <div class="bubble @(mine ? "mine" : "other")">
                                @* İSİM SATIRI YOK, sadece içerik *@
                                <div>@m.Text</div>
                                <div class="msg-meta">
                                    @m.CreatedAt.ToLocalTime().ToString("HH:mm")
                                    @if (mine)
                                    {
                                        if (m.IsRead)
                                        {
                                            <span class="ms-2">✓✓ Görüldü</span>
                                        }
                                        else
                                        {

                                            <span class="ms-2">✓ Gönderildi</span>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="card-footer chat-footer">
                    <form id="sendForm" method="post" asp-action="Send" asp-route-id="@Model.ConversationId" class="d-flex gap-2">
                        @Html.AntiForgeryToken()
                        <textarea id="msgInput" name="text" class="form-control input-round" placeholder="Mesaj yazın..."
                                  rows="1"></textarea>
                        <button class="btn btn-success px-4" type="submit">
                            <i class="bi bi-send-fill"></i>
                        </button>
                    </form>
                </div>
            </div>
        </section>
    </div>
</div>

<script>
    (function(){
      const chatBody = document.getElementById('chatBody');
      const form = document.getElementById('sendForm');
      const input = document.getElementById('msgInput');

      // İlk açılışta en alta kaydır
      if (chatBody) chatBody.scrollTop = chatBody.scrollHeight;

      // Enter = gönder, Shift+Enter = yeni satır
      input?.addEventListener('keydown', function(e){
        if(e.key === 'Enter' && !e.shiftKey){
          e.preventDefault();
          if (input.value.trim().length > 0) form.submit();
        }
      });

      // Autogrow
      const autoGrow = () => { input.style.height='auto'; input.style.height=(input.scrollHeight)+'px'; };
      input?.addEventListener('input', autoGrow);
      setTimeout(autoGrow, 0);

      // SignalR: bu konuşma grubuna katıl (varsa)
      if (window._chatHub) {
        window._chatHub.invoke("JoinConversation", @Model.ConversationId).catch(()=>{});
      }
    })();
</script>
